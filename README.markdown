# Community Chat

Community Chat is a full-stack application that allows users to create and join communities, post content, and engage in discussions. It's built with a Flutter frontend and a Python FastAPI backend, offering a complete mobile and web experience.

## Features

- **User Authentication**: Secure user registration and login functionality.
- **Community Management**: Create, join, and browse communities.
- **Post Creation and Interaction**: Create posts within communities, upvote/downvote, and comment on posts.
- **Personalized Feed**: A home feed displaying posts from joined communities.
- **User Profiles**: View your own profile, including posts and joined communities.
- **Cross-Platform**: A single codebase for Android, iOS, web, and desktop.

## Project Structure

The project is organized into two main directories: `Frontend` and `Backend`.

```
CommunityChat/
├── Backend/
│   ├── alembic/              # Database migrations
│   ├── app/                  # Main application source code
│   │   ├── database/         # Database models and session management
│   │   ├── routers/          # API endpoint definitions
│   │   ├── __pycache__/
│   │   ├── auth.py           # Authentication logic
│   │   ├── crud.py           # Database CRUD operations
│   │   ├── main.py           # FastAPI application entry point
│   │   └── schemas.py        # Pydantic schemas for data validation
│   ├── .env                  # Environment variables
│   ├── alembic.ini           # Alembic configuration
│   └── requirements.txt      # Python dependencies
└── Frontend/
    ├── android/              # Android-specific files
    ├── ios/                  # iOS-specific files
    ├── lib/                  # Main Flutter application source code
    │   ├── core/             # Core components (theme, router, etc.)
    │   ├── models/           # Data models
    │   ├── providers/        # Riverpod state management providers
    │   ├── screens/          # UI screens for different features
    │   ├── services/         # API service for backend communication
    │   └── widgets/          # Reusable UI widgets
    ├── linux/                # Linux-specific files
    ├── macos/                # macOS-specific files
    ├── test/                 # Test files
    ├── web/                  # Web-specific files
    ├── windows/              # Windows-specific files
    └── pubspec.yaml          # Flutter dependencies
```

## Tech Stack

### Frontend
- Flutter
- Riverpod for state management
- GoRouter for navigation

### Backend
- Python
- FastAPI
- SQLAlchemy with asyncpg for asynchronous database interaction
- Alembic for database migrations
- Pydantic for data validation

### Database
- PostgreSQL

## Installation Guide

### Prerequisites
- Flutter SDK
- Python 3.10+
- PostgreSQL

### Backend Setup

1. Clone the repository:
   ```bash
   git clone https://github.com/vishalxvg/communitychat.git
   cd communitychat/Backend
   ```

2. Create a virtual environment and activate it:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows, use `venv\Scripts\activate`
   ```

3. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

4. Set up the database:
   - Create a PostgreSQL database named `community_chat`.
   - Create a `.env` file in the `Backend` directory and add the following, replacing the credentials with your own:
     ```plaintext
     SECRET_KEY="your_secret_key"
     DATABASE_URL="postgresql+asyncpg://<user>:<password>@<host>:<port>/community_chat"
     ALGORITHM="HS256"
     ACCESS_TOKEN_EXPIRE_MINUTES=30
     ```

5. Run database migrations:
   ```bash
   alembic upgrade head
   ```

### Frontend Setup

1. Navigate to the frontend directory:
   ```bash
   cd ../Frontend
   ```

2. Install dependencies:
   ```bash
   flutter pub get
   ```

## Usage Instructions

### Running the Backend
From the `Backend` directory with the virtual environment activated, run:
```bash
uvicorn app.main:app --reload
```
The API will be available at `http://127.0.0.1:8000`.

### Running the Frontend
From the `Frontend` directory, run:
```bash
flutter run
```

## API Documentation
The API documentation is automatically generated by FastAPI and is available at `http://127.0.0.1:8000/docs` when the backend is running.

## Authentication
Authentication is handled via JWT. Obtain a token from the `/login` endpoint and include it in the `Authorization` header for protected routes:
```
Authorization: Bearer <your_token>
```

## Key Endpoints

### Authentication
- `POST /signup`: Create a new user.
- `POST /login`: Authenticate a user and get a JWT.

### Communities
- `GET /api/communities`: Get a list of all communities.
- `POST /api/communities`: Create a new community (authentication required).
- `GET /api/communities/{community_id}`: Get details for a specific community.
- `POST /api/communities/{community_id}/join`: Join a community (authentication required).

### Posts
- `POST /api/communities/{community_id}/posts`: Create a post in a community (authentication required).
- `GET /api/posts/{post_id)`: Get details for a specific post.
- `POST /api/posts/{post_id}/vote`: Vote on a post (authentication required).

### Comments
- `POST /api/posts/{post_id}/comments`: Add a comment to a post (authentication required).
- `GET /api/posts/{post_id}/comments`: Get all comments for a post.

### Feed
- `GET /api/feed`: Get the user's personalized feed (authentication required).

## Configuration & Environment Variables
The backend requires a `.env` file with the following variables:
- `SECRET_KEY`: A secret key for JWT encoding.
- `DATABASE_URL`: The connection string for your PostgreSQL database.
- `ALGORITHM`: The algorithm used for JWT encoding (e.g., `HS256`).
- `ACCESS_TOKEN_EXPIRE_MINUTES`: The expiration time for access tokens in minutes.

The frontend API base URL is configured in `Frontend/lib/core/config.dart`.

## Testing
The project includes a basic Flutter widget test in `Frontend/test/widget_test.dart`. To run the tests, navigate to the `Frontend` directory and run:
```bash
flutter test
```

## Contributing
Contributions are welcome! Please feel free to open an issue or submit a pull request.

1. Fork the repository.
2. Create a new branch: `git checkout -b feature/your-feature-name`.
3. Make your changes and commit them: `git commit -m 'Add some feature'`.
4. Push to the branch: `git push origin feature/your-feature-name`.
5. Open a pull request.

## Roadmap / Future Improvements
- [ ] Real-time chat functionality
- [ ] User profiles with more details (e.g., avatars, karma)
- [ ] Moderation tools for communities
- [ ] Push notifications
- [ ] Search functionality
- [ ] Image and link sharing in posts


## Acknowledgements
This project was built using the following open-source libraries and frameworks:
- Flutter
- FastAPI
- SQLAlchemy
- Alembic
- Pydantic
- Riverpod

And many more! See the `requirements.txt` and `pubspec.yaml` files for a full list of dependencies.
